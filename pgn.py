# -------------------------------------------------------------------------------------------------------------------- #
# pgn.py: περιέχει την κλάση FilePGN για επεξεργασία ενός αρχείου .pgn                                                 #
# -------------------------------------------------------------------------------------------------------------------- #
from functions import get_moves_as_list, get_total_rounds


class FilePGN:
    """
    Δέχεται σαν όρισμα τη διεύθυνση ενός αρχείου pgn
    Με τις μεθόδους αποσπά από το αρχείο τις πληροφορίες που περιέχει, τις επεξεργάζεται και τις οργανώνει σε δομές

    ...

    Ορίσματα:
        file_path (str):
            διεύθυνση αρχείου pgn

    Μέθοδοι:
        get_info(self, game_no: int =0) -> dict:
            δημιουργεί και επιστρέφει λεξικό με τις πληροφορίες ενός συγκεκριμένου αγώνα

        __split_files(self) -> list[str]:
            δημιουργεί και επιστρέφει λίστα με τις πληροφορίες και κινήσεις των παιχνιδιών που περιέχει το αρχείο pgn

        __get_index_of_games(self) -> list:
            επιστρέφει λίστα με τις θέσεις των παιχνιδιών της λίστας από split_files
    """

    def __init__(self, file_path: str):
        """
        Μέθοδος για αρχικοποίηση αντικειμένου της κλάσης

        ...

        Ορίσματα:
            file_path (str): διεύθυνση αρχείου pgn που θα χρησιμοποιηθεί από το αντικείμενο
        """
        # η κλάση παίρνει σαν όρισμα τη διεύθυνση ενός αρχείου *.pgn
        self.file_path = file_path

        # κλήση συνάρτησης "split_files" για το αρχείο αυτό
        # η λίστα self.game_data πλέον περιλαμβάνει
        # α) στις θέσεις n την πληροφορία ενός από τους αγώνες και
        # β) στις θέσεις n+1 τις κινήσεις του εκάστοτε αγώνα
        # [όπου "n" ζυγός μη αρνητικός αριθμός (0, 2, 4 κλπ)]
        self.game_data = self.__split_files()

        # λίστα με τις θέσεις όπου βρίσκονται πληροφορίες αγώνα
        self.index_of_games = self.__get_index_of_games()

    def get_info(self, game_no: int = 0) -> dict[str, str | list]:
        """
        Εισάγει σε λεξικό τις πληροφορίες ενός αγώνα από το αρχείο .pgn και το επιστρέφει.
        Λέξεις κλειδιά λεξικού: Event, Site, Date, White, Black, Result, Rounds, moves

        Ορίσματα:
        ---------
            game_no (int) default=0:
                ζυγός μη αρνητικός αριθμός (0, 2, 4 κλπ) που δείχνει τον αγώνα που θα αναλυθεί

        Επιστρεφόμενο αντικείμενο:
        --------------------------
            game_dict (dict):
                λεξικό με τις πληροφορίες ενός αγώνα
        """
        # συνάρτηση που επιστρέφει την πληροφορίες από τις λέξεις κλειδιά της info_list
        info_list = ["Event ", "Site ", "Date ", "Round ", "White ", "Black ", "Result "]
        # αρχικοποίηση λεξικού που θα περιέχει τις πληροφορίες του αγώνα
        game_dict = {}

        # δημιουργία λίστας με συμβολοσειρές, που περιέχει τις πληροφορίες του αγώνα που επιλέχθηκε
        game_info = self.game_data[game_no].split("\n")

        # εξαγωγή πληροφοριών αγώνα
        # για κάθε λέξη-κλειδί της info_list
        for key_word in info_list:
            # για κάθε συμβολοσειρά της game_info
            for string in game_info:
                # πχ key_word: Event , string: [Event "Sparkassen Chess Meeting"]
                if string[1: 1 + len(key_word)] == key_word:
                    # εύρεση θέσης που ξεκινάει και τελειώνει η πραγματική πληροφορία που μας ενδιαφέρει
                    start = string.find("\"") + 1
                    end = string.rfind("\"")
                    # προσθήκη σε λεξικό
                    game_dict[key_word.strip()] = string[start:end]
                    break
            # διατρέξαμε όλες τις συμβολοσειρές και δε βρέθηκε η σχετική πληροφορία
            else:
                game_dict[key_word.strip()] = "[no info]"

        try:
            # δημιουργία συμβολοσειράς, που περιέχει τις κινήσεις του αγώνα
            game_moves = self.game_data[game_no + 1]
        except IndexError:
            game_moves = ""

        # προσθήκη λίστας κινήσεων στο λεξικό
        game_dict["moves"] = get_moves_as_list(game_moves)

        # προσθήκη συνολικών γύρων στο λεξικό
        game_dict["RoundsPlayed"] = get_total_rounds(game_dict["moves"])

        # επιστρεφόμενη τιμή: λεξικό με όλες τις πληροφορίες του αγώνα
        return game_dict

    def __split_files(self) -> list[str]:
        """
        Εξάγει και επιστρέφει αγώνες από ένα αρχείο pgn
        Αποθηκεύει τις πληροφορίες του αγώνα σε μία λίστα με:
        α) στις θέσεις n την πληροφορία ενός από τους αγώνες και
        β) στις θέσεις n+1 τις κινήσεις του εκάστοτε αγώνα
        [όπου "n" ζυγός μη αρνητικός αριθμός (0, 2, 4 κλπ)]

        Επιστρεφόμενο αντικείμενο:
            game_data_list (list[str]):
                λίστα με συμβολοσειρές με τις πληροφορίες που αποσπάστηκαν από το αρχείο
        """

        # διάβασμα του αρχείου pgn
        with open(self.file_path, "r") as pgn:
            # αρχικοποίηση λίστας αποθήκευσης πληροφοριών
            game_data_list = []
            # αρχικοποίηση βοηθητικής συμβολοσειράς όπου θα αποθηκεύεται προσωρινά η πληροφορία
            game_data = ''
            # προσπέλαση αρχείου pgn γραμμή προς γραμμή
            for line in pgn:
                # προσθήκη γραμμής βοηθητική συμβολοσειρά
                game_data += line
                if line == "\n":
                    # κάθε φορά που γίνεται διάβασμα κενής γραμμής, σημαίνει ότι ολοκληρώθηκε το διάβασμα
                    # είτε των στοιχείων ενός αγώνα είτε των κινήσεων του

                    if game_data == "\n":
                        # σε περίπτωση που σε κάποιο σημείο υπάρχουν περισσότερες από μία κενές γραμμές, η game_data θα
                        # περιλαμβάνει μόνο τον χαρακτήρα αλλαγής γραμμής·
                        # την αγνοώ και η μέθοδος συνεχίζει στην επόμενη γραμμή
                        game_data = ''
                        continue
                    # όση πληροφορία διαβάστηκε προστίθεται στη λίστα
                    game_data_list.append(game_data)
                    # και η βοηθητική συμβολοσειρά αδειάζει
                    game_data = ''

            # προσθήκη τελευταίας σειράς κινήσεων, σε περίπτωση που το τελικό αρχείο
            # δεν τελειώνει με μία κενή σειρά
            if game_data:
                game_data_list.append(game_data)

            # η επιστρεφόμενη λίστα περιέχει
            # α) στις θέσεις n την πληροφορία ενός από τους αγώνες και
            # β) στις θέσεις n+1 τις κινήσεις του εκάστοτε αγώνα
            # [όπου "n" ζυγός μη αρνητικός αριθμός (0, 2, 4 κλπ)]
            pgn.close()
            return game_data_list

    def __get_index_of_games(self) -> list:
        """
        Επιστρέφει λίστα με τα index των πληροφοριών παιχνιδιών ενός αρχείου pgn

        Επιστρεφόμενο αντικείμενο:
            index_of_games (list):
                λίστα με τα index των πληροφοριών παιχνιδιών ενός αρχείου pgn
        """
        index_of_games = []

        # αποθήκευση σημείων όπου ξεκινάει ο κάθε αγώνας
        for num in range(0, len(self.game_data), 2):
            index_of_games.append(num)

        return index_of_games
